services:
  crawl4rag:
    labels:
      - com.centurylinklabs.watchtower.enable=false
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crawl4rag
    ports:
      - "${PORT}:${PORT}"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=crawl4rag-db
      - NEO4J_URI=bolt://crawl4rag-neo4j:7687
    depends_on:
      crawl4rag-db:
        condition: service_healthy
      crawl4rag-neo4j:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:${PORT:-8051}/messages', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  crawl4rag-db:
    image: pgvector/pgvector:pg16
    container_name: crawl4rag-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - /mnt/cache/appdata/crawl4rag-db:/var/lib/postgresql/data
      - ./crawled_pages.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5332:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  crawl4rag-neo4j:
    image: neo4j:5
    container_name: crawl4rag-neo4j
    restart: unless-stopped
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc"]
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - /mnt/cache/appdata/crawl4rag-neo4j:/data